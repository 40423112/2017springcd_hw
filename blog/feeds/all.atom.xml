<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>2017Springcd (MDE)</title><link href="./" rel="alternate"></link><link href="./feeds/all.atom.xml" rel="self"></link><id>./</id><updated>2017-06-22T12:00:00+08:00</updated><entry><title>協同產品設計實習 w17</title><link href="./xie-tong-chan-pin-she-ji-shi-xi-w17.html" rel="alternate"></link><published>2017-06-22T12:00:00+08:00</published><updated>2017-06-22T12:00:00+08:00</updated><author><name>40423112</name></author><id>tag:,2017-06-22:./xie-tong-chan-pin-she-ji-shi-xi-w17.html</id><summary type="html">&lt;p&gt;行走機構
&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/222340552" width="640" height="356" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/222340552"&gt;40423116-2017springcd-final-6.mp4&lt;/a&gt; from &lt;a href="https://vimeo.com/user47573583"&gt;40423116&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</summary><category term="作業"></category></entry><entry><title>w15 練習</title><link href="./w15-lian-xi.html" rel="alternate"></link><published>2017-06-01T12:00:00+08:00</published><updated>2017-06-01T12:00:00+08:00</updated><author><name>40423112</name></author><id>tag:,2017-06-01:./w15-lian-xi.html</id><summary type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;1.800x600 為畫布大小, 在畫布正中央畫一個半徑為 250 , 壓力角 20, 齒數為 36 齒, 且只有上半齒形的漸開線正齒輪輪廓&lt;/p&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="onegear" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="white"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2
r = 250
# 齒數
n = 36
# 壓力角
pa = 20
gear36 = Spur(ctx).Gear(x, y, r, n , pa, "black")

div = doc["onegear_div"]

ctx.beginPath()
ctx.lineWidth = "600"
ctx.strokeStyle = "white"
ctx.moveTo(0,600)
ctx.lineTo(800,600)
ctx.stroke()

ctx.fillStyle = "#0000FF"
ctx.font = "30px ScriptS"
ctx.fillText("40423112",(canvas.width)/2-60,(canvas.height)/2-25)
ctx.stroke()

&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;p&gt;2.建立第二個 800x600 的畫布, 請畫出只有一齒輪廓, 且充滿畫布 80% 範圍的正齒輪, 且該齒輪廓下方水平線, 連接兩端齒根圓點交的直線以紅色繪製, 且在齒輪下方以藍色字元寫上自己的學號.&lt;/p&gt;
&lt;canvas id="onegear1" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear1_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=17, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear1']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2+2400
r = 8*(canvas.height/2)
# 齒數
n = 20
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "pink")



ctx.fillStyle = "#0000FF"
ctx.font = "30px ScriptS"
ctx.fillText("40423112",(canvas.width)/2-60,(canvas.height)/2+280)
ctx.stroke()

&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;p&gt;3.由最右邊齒數 16 齒開始囓合, 依序增加 2 齒, 當排至平面四齒囓合後, 第五位組員則以垂直方向向下囓合兩個齒輪後, 轉由右至左水平排列&lt;/p&gt;
&lt;canvas id='gear3' width='1200' height='800'&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
# 導入 browser 模組中的 document, 並設為 doc 變數
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="white"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)

                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)

# 準備在 id="gear3" 的 canvas 中繪圖
canvas = doc["gear3"]
ctx = canvas.getContext("2d")

# 模數決定齒的尺寸大小, 囓合齒輪組必須有相同的模數與壓力角
# 壓力角 pa 單位為角度
pa = 20
# 第1齒輪齒數
n_g1 = 16
# 第2齒輪齒數
n_g2 = 18
# 第3齒輪齒數
n_g3 = 20
# 第4齒輪齒數
n_g4 = 22
# 第5齒輪齒數
n_g5 = 24
# 第6齒輪齒數
n_g6 = 26
# 第7齒輪齒數
n_g7 = 28
# 第8齒輪齒數
n_g8 = 30
# m 為模數, 根據畫布的寬度, 計算適合的模數大小
m = (0.6*canvas.width)/(n_g1+n_g2+n_g3+n_g4)
# 根據模數 m, 計算各齒輪的節圓半徑
rp_g1 = m*n_g1/2
rp_g2 = m*n_g2/2
rp_g3 = m*n_g3/2
rp_g4 = m*n_g4/2
rp_g5 = m*n_g5/2
rp_g6 = m*n_g6/2
rp_g7 = m*n_g7/2
rp_g8 = m*n_g8/2
#單一正齒輪繪圖呼叫格式 Spur(ctx).Gear(x, y, r, n, pa, "blue")
# 開始繪製囓合齒輪輪廓
# 繪圖第1齒輪的圓心座標, 因為希望繪圖佔去 canvas.width 的 80%, 所以兩邊各預留 10% 距離
x_g1 = canvas.width*0.05+rp_g1
# y 方向繪圖區域上方預留 canvas.height 的 20%
y_g1 = canvas.height*0.1+rp_g1
# 第2齒輪的圓心座標, 假設排列成水平, 表示各齒輪圓心 y 座標相同
x_g2 = x_g1 + rp_g1 + rp_g2
y_g2 = y_g1
# 第3齒輪的圓心座標
x_g3 = x_g1 + rp_g1 + 2*rp_g2 + rp_g3
y_g3 = y_g1

# 第4齒輪的圓心座標
x_g4 = x_g1 + rp_g1 + 2*rp_g2 + 2*rp_g3+rp_g4
y_g4 = y_g1

# 第5齒輪的圓心座標
x_g5 = x_g1 + rp_g1 + 2*rp_g2 + 2*rp_g3+rp_g4
y_g5 = y_g4+rp_g4+rp_g5

# 第6齒輪的圓心座標
x_g6 =x_g1 + rp_g1 + 2*rp_g2 + 2*rp_g3+rp_g4
y_g6 = y_g5+rp_g5+rp_g6

# 第7齒輪的圓心座標
x_g7 =x_g6-rp_g6-rp_g7
y_g7 = y_g5+rp_g5+rp_g6

# 第8齒輪的圓心座標
x_g8 =x_g7-rp_g7-rp_g8
y_g8 = y_g5+rp_g5+rp_g6

# 將第1齒輪順時鐘轉 90 度, 也就是 math.pi/2
# 使用 ctx.save() 與 ctx.restore() 以確保各齒輪以相對座標進行旋轉繪圖
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g1, y_g1)
# rotate to engage
ctx.rotate(math.pi/2)
# put it back
ctx.translate(-x_g1, -y_g1)
# 繪製第一個齒輪輪廓
Spur(ctx).Gear(x_g1, y_g1, rp_g1, n_g1, pa, "black")
ctx.restore()

ctx.beginPath()
ctx.fillStyle = "#0000FF"
ctx.font = "20px ScriptS"
ctx.fillText("40423112 ",x_g1-20, y_g1)
ctx.stroke()

# 將第2齒輪逆時鐘轉 90 度之後, 再多轉一齒, 以便與第1齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g2, y_g2)
# rotate to engage
ctx.rotate(-math.pi/2-math.pi/n_g2)
# put it back
ctx.translate(-x_g2, -y_g2)
Spur(ctx).Gear(x_g2, y_g2, rp_g2, n_g2, pa, "blue")
ctx.restore()

ctx.beginPath()
ctx.fillStyle = "#0000FF"
ctx.font = "20px ScriptS"
ctx.fillText("40423116 ",x_g2-20, y_g2)
ctx.stroke()

# 將第3齒輪逆時鐘轉 90 度之後, 再往回轉第2齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g3, y_g3)
# rotate to engage
# math.pi+math.pi/n_g2 為第2齒輪從順時鐘轉 90 度之後, 必須配合目前的標記線所作的齒輪 2 轉動角度, 要轉換到齒輪3 的轉動角度
# 必須乘上兩齒輪齒數的比例, 若齒輪2 大, 則齒輪3 會轉動較快
# 第1個 -math.pi/2 為將原先垂直的第3齒輪定位線逆時鐘旋轉 90 度
# -math.pi/n_g3 則是第3齒與第2齒定位線重合後, 必須再逆時鐘多轉一齒的轉角, 以便進行囓合
# (math.pi+math.pi/n_g2)*n_g2/n_g3 則是第2齒原定位線為順時鐘轉動 90 度, 
# 但是第2齒輪為了與第1齒輪囓合, 已經距離定位線, 多轉了 180 度, 再加上第2齒輪的一齒角度, 因為要帶動第3齒輪定位, 
# 這個修正角度必須要再配合第2齒與第3齒的轉速比加以轉換成第3齒輪的轉角, 因此乘上 n_g2/n_g3
ctx.rotate(-math.pi/2-math.pi/n_g3+(math.pi+math.pi/n_g2)*n_g2/n_g3)
# put it back
ctx.translate(-x_g3, -y_g3)
Spur(ctx).Gear(x_g3, y_g3, rp_g3, n_g3, pa, "red")
ctx.restore()

ctx.beginPath()
ctx.fillStyle = "#0000FF"
ctx.font = "20px ScriptS"
ctx.fillText("40423118 ",x_g3-20, y_g3)
ctx.stroke()

# 將第4齒輪逆時鐘轉 90 度之後, 再往回轉第3齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g4, y_g4)
# rotate to engage
ctx.rotate(math.pi/2-math.pi/n_g4+(math.pi+math.pi/n_g3)*n_g3/n_g4*2)
# put it back
ctx.translate(-x_g4, -y_g4)
Spur(ctx).Gear(x_g4, y_g4, rp_g4, n_g4, pa, "green")
ctx.restore()

ctx.beginPath()
ctx.fillStyle = "#0000FF"
ctx.font = "20px ScriptS"
ctx.fillText("40423127 ",x_g4-20, y_g4)
ctx.stroke()


# 將第5齒輪逆時鐘轉 90 度之後, 再往回轉第3齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g5, y_g5)
# rotate to engage
ctx.rotate(math.pi/2-math.pi/n_g5+(math.pi+math.pi/n_g4)*n_g4/n_g5*2)
# put it back
ctx.translate(-x_g5, -y_g5)
Spur(ctx).Gear(x_g5, y_g5, rp_g5, n_g5, pa, "black")
ctx.restore()

ctx.beginPath()
ctx.fillStyle = "#0000FF"
ctx.font = "20px ScriptS"
ctx.fillText("40423131 ",x_g5-20, y_g5)
ctx.stroke()


# 將第6齒輪逆時鐘轉 90 度之後, 再往回轉第3齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g6, y_g6)
# rotate to engage
ctx.rotate(math.pi/2-math.pi/n_g6+(math.pi+math.pi/n_g5)*n_g5/n_g6*2)
# put it back
ctx.translate(-x_g6, -y_g6)
Spur(ctx).Gear(x_g6, y_g6, rp_g6, n_g6, pa, "blue")
ctx.restore()

ctx.beginPath()
ctx.fillStyle = "#0000FF"
ctx.font = "20px ScriptS"
ctx.fillText("40423132 ",x_g6-20, y_g6)
ctx.stroke()


# 將第7齒輪逆時鐘轉 90 度之後, 再往回轉第3齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g7, y_g7)
# rotate to engage
ctx.rotate(-math.pi/2-math.pi/n_g7+(math.pi+math.pi/n_g6)*n_g6/n_g7)
# put it back
ctx.translate(-x_g7, -y_g7)
Spur(ctx).Gear(x_g7, y_g7, rp_g7, n_g7, pa, "red")
ctx.restore()

ctx.beginPath()
ctx.fillStyle = "#0000FF"
ctx.font = "20px ScriptS"
ctx.fillText("40423152 ",x_g7-20, y_g7)
ctx.stroke()

&lt;/script&gt;</summary><category term="作業"></category></entry><entry><title>協同產品設計實習 w13</title><link href="./xie-tong-chan-pin-she-ji-shi-xi-w13.html" rel="alternate"></link><published>2017-05-18T12:00:00+08:00</published><updated>2017-05-18T12:00:00+08:00</updated><author><name>40423112</name></author><id>tag:,2017-05-18:./xie-tong-chan-pin-she-ji-shi-xi-w13.html</id><summary type="html">&lt;p&gt;n = 17 , 13 , 11 , 14 齒輪組嚙合&lt;/p&gt;


&lt;p&gt;利用漸開線原理, 以 Brython 繪製正齒輪廓:&lt;/p&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="onegear" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="white"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear']
ctx = canvas.getContext("2d")
x = (canvas.width)/2 - 100
y = (canvas.height)/2
r = 0.8*(canvas.height/2)
# 齒數
n17 = 17
n11 = 11
n13 = 13
n14 = 14
canvas_size = canvas.height*0.4
r17 = canvas_size*n17/(n17+n11+n13+n14)
r11 = canvas_size*n11/(n17+n11+n13+n14)
r13 = canvas_size*n13/(n17+n11+n13+n14)
r14 = canvas_size*n14/(n17+n11+n13+n14)
x17 = x - r17
x11 = x + r11
x13 = x+ 2*r11 + r13
x14 = x+ 2*r11 + r13
y17 = y
y11 = y
y13 = y
y14 = y*2/1.435
# 壓力角
pa = 20
gear17 = Spur(ctx).Gear(x17, y17, r17, n17, pa, "yellow")
gear11 = Spur(ctx).Gear(x11, y11, r11, n11, pa, "green")
gear13 = Spur(ctx).Gear(x13, y13, r13, n13, pa, "black")
gear14 = Spur(ctx).Gear(x14, y14, r14, n14, pa, "blue")

div = doc["onegear_div"]

&lt;/script&gt;</summary><category term="作業"></category></entry><entry><title>協同產品設計實習 w12</title><link href="./xie-tong-chan-pin-she-ji-shi-xi-w12.html" rel="alternate"></link><published>2017-05-11T12:00:00+08:00</published><updated>2017-05-11T12:00:00+08:00</updated><author><name>40423112</name></author><id>tag:,2017-05-11:./xie-tong-chan-pin-she-ji-shi-xi-w12.html</id><summary type="html">&lt;p&gt;n = 17 , 13 , 11 齒輪組嚙合&lt;/p&gt;


&lt;p&gt;利用漸開線原理, 以 Brython 繪製正齒輪廓:&lt;/p&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="onegear" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="white"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear']
ctx = canvas.getContext("2d")
x = (canvas.width)/2 - 100
y = (canvas.height)/2
r = 0.8*(canvas.height/2)
# 齒數
n17 = 17
n11 = 11
n13 = 13
canvas_size = canvas.height*0.4
r17 = canvas_size*n17/(n17+n11+n13)
r11 = canvas_size*n11/(n17+n11+n13)
r13 = canvas_size*n13/(n17+n11+n13)
x17 = x - r17
x11 = x + r11
x13 = x+ 2*r11 + r13
y17 = y
y11 = y
y13 = y
# 壓力角
pa = 20
gear17 = Spur(ctx).Gear(x17, y17, r17, n17, pa, "yellow")
gear11 = Spur(ctx).Gear(x11, y11, r11, n11, pa, "green")
gear13 = Spur(ctx).Gear(x13, y13, r13, n13, pa, "black")

div = doc["onegear_div"]

&lt;/script&gt;

&lt;!-- 以下處理 Cango Spur Gear --&gt;

&lt;!-- Cango 程式庫 --&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
/Cango-9v05-min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
/CangoAxes-2v09.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
/CangoAnimation-5v00.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
/gearUtils-05.js"&gt;&lt;/script&gt;

&lt;canvas id='cango_gear' width='800' height='750'&gt;&lt;/canvas&gt;

&lt;script type="text/python"&gt;
# 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容
from browser import document as doc
# 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換
from browser import window
import math

# 主要用來取得畫布大小
canvas = doc["cango_gear"]
# 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx
ctx = canvas.getContext("2d")
cango = window.Cango.new
# 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換
shapedefs = window.shapeDefs
# 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形
# in CangoAnimation.js
#interpolate1 = window.interpolate
# Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件
#cobj = window.Cobj.new
shape = window.Shape.new
path = window.Path.new
creategeartooth = window.createGearTooth.new

tweener = window.Tweener.new
# 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id="cango_gear" 的 canvas 上
cgo = cango("cango_gear")

######################################
# 畫正齒輪輪廓
#####################################
# n 為齒數
n = 17
# pa 為壓力角
pa = 25
# m 為模數, 根據畫布的寬度, 計算適合的模數大小
# Module = mm of pitch diameter per tooth
m = 0.4*canvas.width/n
# pr 為節圓半徑
pr = n*m/2 # gear Pitch radius
# generate gear
data = creategeartooth(m, n, pa)
# Brython 程式中的 print 會將資料印在 Browser 的 console 區
#print(data)
gearTooth = shape(data, {
  "fillColor":"#ddd0dd",
  "border": True,
  "strokeColor": "#606060" })
gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh
# 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中
gear = gearTooth.dup()
# gear 為單一齒的輪廓資料
#cgo.render(gearTooth)

# 利用單齒輪廓旋轉, 產生整個正齒輪外形
for i in range(1, n):
    # 將 gearTooth 中的資料複製到 newTooth
    newTooth = gearTooth.dup()
    # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear
    newTooth.rotate(360*i/n)
    # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號
    gear.appendPath(newTooth, True) # trim move command = True

# 建立軸孔
# add axle hole, hr 為 hole radius
hr = 0.6*pr # diameter of gear shaft
shaft = path(shapedefs.circle(hr))
shaft.revWinding()
gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path

# setup the animation
# backlash (mm)
bklsh = 0.04*m
# centre shift to make backlash
dC = bklsh/(3*math.tan(math.pi*pa/180))
# np 為小齒輪齒數
np = 13
# gear ratio
gr = n/np              
gearConfig = {'cx':-pr, 'cy':0, 'degs':[0, 360]}
# gr*0.666 rpm
#pinionConfig = {'cx':pr+dC, 'cy':0, 'degs':[0, -gr*360]}
# 0.666 rpm
twnr = tweener(0, 90000, "loop")

cx = canvas.width/2
cy = canvas.height/2
#gear.translate(cx, cy)
# render 繪出靜態正齒輪輪廓
#cgo.render(gear)
#cgo.render(gear2)
# 利用 gear 資料複製一份, 命名為 gear1
gear1 = gear.dup()
gear2 = gear.dup()

from time import time
from browser.timer import request_animation_frame as raf
from browser.timer import set_interval

deg = math.pi/180

def draw():
    cgo.clearCanvas()
    gear.rotate(2*deg)
    # 在特定位置, 以特定 scale, 特定 degs 執行 render
    cgo.render(gear, {'x':cx-pr/2, 'y':cy, 'scl':0.5, 'degs':0})
    gear1.rotate(-2*deg)
    cgo.render(gear1, {'x':cx+pr*2*0.5-pr/2, 'y':cy, 'scl':0.5, 'degs':0})
    gear2.rotate(2*deg)
    cgo.render(gear2, {'x':cx+pr*2*0.5*2-pr/2, 'y':cy, 'scl':0.5, 'degs':0})

set_interval(draw, 2)
&lt;/script&gt;</summary><category term="作業"></category></entry><entry><title>協同產品設計實習 w11</title><link href="./xie-tong-chan-pin-she-ji-shi-xi-w11.html" rel="alternate"></link><published>2017-05-04T12:00:00+08:00</published><updated>2017-05-04T12:00:00+08:00</updated><author><name>40423112</name></author><id>tag:,2017-05-04:./xie-tong-chan-pin-she-ji-shi-xi-w11.html</id><summary type="html">&lt;p&gt;從單一 2D 正齒輪繪圖到齒輪組嚙合&lt;/p&gt;


&lt;p&gt;利用漸開線原理, 以 Brython 繪製單一正齒輪廓:&lt;/p&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="onegear" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2
r = 0.8*(canvas.height/2)
# 齒數
n = 53
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "blue")
div = doc["onegear_div"]
&lt;/script&gt;

&lt;!-- 以下處理 Cango Spur Gear --&gt;

&lt;!-- Cango 程式庫 --&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
/Cango-9v05-min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
/CangoAxes-2v09.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
/CangoAnimation-5v00.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
/gearUtils-05.js"&gt;&lt;/script&gt;

&lt;canvas id='cango_gear' width='800' height='750'&gt;&lt;/canvas&gt;

&lt;script type="text/python"&gt;
# 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容
from browser import document as doc
# 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換
from browser import window
import math

# 主要用來取得畫布大小
canvas = doc["cango_gear"]
# 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx
ctx = canvas.getContext("2d")
cango = window.Cango.new
# 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換
shapedefs = window.shapeDefs
# 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形
# in CangoAnimation.js
#interpolate1 = window.interpolate
# Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件
#cobj = window.Cobj.new
shape = window.Shape.new
path = window.Path.new
creategeartooth = window.createGearTooth.new

tweener = window.Tweener.new
# 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id="cango_gear" 的 canvas 上
cgo = cango("cango_gear")

######################################
# 畫正齒輪輪廓
#####################################
# n 為齒數
n = 17
# pa 為壓力角
pa = 25
# m 為模數, 根據畫布的寬度, 計算適合的模數大小
# Module = mm of pitch diameter per tooth
m = 0.8*canvas.width/n
# pr 為節圓半徑
pr = n*m/2 # gear Pitch radius
# generate gear
data = creategeartooth(m, n, pa)
# Brython 程式中的 print 會將資料印在 Browser 的 console 區
#print(data)
gearTooth = shape(data, {
  "fillColor":"#ddd0dd",
  "border": True,
  "strokeColor": "#606060" })
gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh
# 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中
gear = gearTooth.dup()
# gear 為單一齒的輪廓資料
#cgo.render(gearTooth)

# 利用單齒輪廓旋轉, 產生整個正齒輪外形
for i in range(1, n):
    # 將 gearTooth 中的資料複製到 newTooth
    newTooth = gearTooth.dup()
    # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear
    newTooth.rotate(360*i/n)
    # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號
    gear.appendPath(newTooth, True) # trim move command = True

# 建立軸孔
# add axle hole, hr 為 hole radius
hr = 0.6*pr # diameter of gear shaft
shaft = path(shapedefs.circle(hr))
shaft.revWinding()
gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path

# setup the animation
# backlash (mm)
bklsh = 0.04*m
# centre shift to make backlash
dC = bklsh/(2*math.tan(math.pi*pa/180))
# np 為小齒輪齒數
np = 13
# gear ratio
gr = n/np              
gearConfig = {'cx':-pr, 'cy':0, 'degs':[0, 360]}
# gr*0.666 rpm
#pinionConfig = {'cx':pr+dC, 'cy':0, 'degs':[0, -gr*360]}
# 0.666 rpm
twnr = tweener(0, 90000, "loop")

cx = canvas.width/2
cy = canvas.height/2
#gear.translate(cx, cy)
# render 繪出靜態正齒輪輪廓
#cgo.render(gear)
# 利用 gear 資料複製一份, 命名為 gear1
gear1 = gear.dup()

from time import time
from browser.timer import request_animation_frame as raf
from browser.timer import set_interval

deg = math.pi/180

def draw():
    cgo.clearCanvas()
    gear.rotate(2*deg)
    # 在特定位置, 以特定 scale, 特定 degs 執行 render
    cgo.render(gear, {'x':cx-pr/2, 'y':cy, 'scl':0.5, 'degs':0})
    gear1.rotate(-2*deg)
    cgo.render(gear1, {'x':cx+pr*2*0.5-pr/2, 'y':cy, 'scl':0.5, 'degs':0})

set_interval(draw, 2)
&lt;/script&gt;</summary><category term="作業"></category></entry><entry><title>協同產品設計實習 w10 - 2</title><link href="./xie-tong-chan-pin-she-ji-shi-xi-w10-2.html" rel="alternate"></link><published>2017-04-29T12:00:00+08:00</published><updated>2017-04-29T12:00:00+08:00</updated><author><name>40423112</name></author><id>tag:,2017-04-29:./xie-tong-chan-pin-she-ji-shi-xi-w10-2.html</id><summary type="html">&lt;p&gt;按下按鈕，取 a 值&lt;/p&gt;
&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;div id="container" width="600" height="400"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
import math
container = doc['container']
degree = math.pi/180
def button1(event):
    a = input("give me a")
    container &lt;= str(math.cos(60*degree)+float(a))
doc["button1"].bind("click", button1)
&lt;/script&gt;

&lt;p&gt;&lt;button id="button1"&gt;按下取 a 值&lt;/button&gt;&lt;/p&gt;</summary><category term="作業"></category></entry><entry><title>協同產品設計實習 w10</title><link href="./xie-tong-chan-pin-she-ji-shi-xi-w10.html" rel="alternate"></link><published>2017-04-27T12:00:00+08:00</published><updated>2017-04-27T12:00:00+08:00</updated><author><name>40423112</name></author><id>tag:,2017-04-27:./xie-tong-chan-pin-she-ji-shi-xi-w10.html</id><summary type="html">&lt;p&gt;加 減 乘 除 運算&lt;/p&gt;


&lt;p&gt;1.加法&lt;/p&gt;
&lt;pre class="brush: python"&gt;
加法
def add(a, b):
    return a+b

加法運算  
import sys
sys.path.append("./w10")
import add

sum = add.add(4, 6)
print(sum)

&lt;/pre&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;div id="container" width="600" height="400"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
import math
container = doc['container']
def button1(event):
    a = input("give me a")
    b = input("give me b")
    container &lt;= str(float(a)+float(b))
doc["button1"].bind("click", button1)

&lt;/script&gt;

&lt;p&gt;&lt;button id="button1"&gt;加法運算&lt;/button&gt;&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/214957102" width="640" height="328" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/214957102"&gt;add&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207235"&gt;吳欣奕&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;2減法 &lt;/p&gt;
&lt;pre class="brush: python"&gt;
減法
def minus(a, b):
    return a-b

減法運算  
import sys
sys.path.append("./w10")
import minus

sum = minus.minus(4, 6)
print(sum)

&lt;/pre&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;div id="container2" width="600" height="400"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
import math
container = doc['container2']
def button2(event):
    a = input("give me a")
    b = input("give me b")
    container &lt;= str(float(a)-float(b))
doc["button2"].bind("click", button2)

&lt;/script&gt;

&lt;p&gt;&lt;button id="button2"&gt;減法運算&lt;/button&gt;&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/214957402" width="640" height="480" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/214957402"&gt;minus&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207235"&gt;吳欣奕&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;3.乘法 &lt;/p&gt;
&lt;pre class="brush: python"&gt;
乘法
def cro(a, b):
    return a*b

乘法運算  
import sys
sys.path.append("./w10")
import cro

sum = cro.cro(7, 10)
print(sum)

&lt;/pre&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;div id="container3" width="600" height="400"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
import math
container = doc['container3']
def button3(event):
    a = input("give me a")
    b = input("give me b")
    container &lt;= str(float(a)*float(b))
doc["button3"].bind("click", button3)

&lt;/script&gt;

&lt;p&gt;&lt;button id="button3"&gt;乘法運算&lt;/button&gt;&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/214957482" width="640" height="480" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/214957482"&gt;cro&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207235"&gt;吳欣奕&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;4.除法&lt;/p&gt;
&lt;pre class="brush: python"&gt;
除法
def exc(a, b):
    return a/b

除法運算  
import sys
sys.path.append("./w10")
import exc 

sum = exc.exc(10, 5)
print(sum)

&lt;/pre&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;div id="container4" width="600" height="400"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
import math
container = doc['container4']
def button4(event):
    a = input("give me a")
    b = input("give me b")
    container &lt;= str(float(a)/float(b))
doc["button4"].bind("click", button4)

&lt;/script&gt;

&lt;p&gt;&lt;button id="button4"&gt;除法運算&lt;/button&gt;&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/214957543" width="640" height="480" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/214957543"&gt;exc&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207235"&gt;吳欣奕&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</summary><category term="作業"></category></entry><entry><title>協同產品設計實習 期中考</title><link href="./xie-tong-chan-pin-she-ji-shi-xi-qi-zhong-kao.html" rel="alternate"></link><published>2017-04-20T12:00:00+08:00</published><updated>2017-04-20T12:00:00+08:00</updated><author><name>40423112</name></author><id>tag:,2017-04-20:./xie-tong-chan-pin-she-ji-shi-xi-qi-zhong-kao.html</id><summary type="html">&lt;p&gt;1.四連桿機構協同 Trace Point &lt;/p&gt;
&lt;p&gt;2.Fourbar Walker  零件繪圖與組立運動模擬&lt;/p&gt;


&lt;p&gt;1.四連桿機構協同 Trace Point &lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/214863849" width="640" height="480" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/214863849"&gt;Trace Point&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207235"&gt;吳欣奕&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;2.利用 solvespace 繪製 Fourbar Walker &lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/214858536" width="640" height="341" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/214858536"&gt;Fourbar Walker solvespace 零件繪圖&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207235"&gt;吳欣奕&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;3.利用 onshape 繪製 Fourbar Walker &lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/214858702" width="640" height="341" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/214858702"&gt;Fourbar Walker OnShape 零件繪圖&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207235"&gt;吳欣奕&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;4.利用 onshape 組裝並模擬 Fourbar Walker &lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/214858821" width="640" height="341" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/214858821"&gt;Fourbar Walker OnShape 零件組立運動模擬&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207235"&gt;吳欣奕&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;link href="./../work/madeleine/src/css/Madeleine.css" rel="stylesheet"&gt;
&lt;script src="./../work/madeleine/src/stats.js"&gt;&lt;/script&gt;
&lt;script src="./../work/madeleine/src/detector.js"&gt;&lt;/script&gt;
&lt;script src="./../work/madeleine/src/three.min.js"&gt;&lt;/script&gt;
&lt;script src="./../work/madeleine/src/Madeleine.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;div id="target" class="madeleine"&gt;&lt;/div&gt;

&lt;script&gt;
window.onload = function(){
    var madeleine = new Madeleine({
      target: 'target', // target div id
      data: './../data/Fourbar Walker.stl', // data path
      path: './../work/madeleine/src/' // path to source directory from current html file
    });
}; 
&lt;/script&gt;

&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r68/three.min.js"
&gt;&lt;/script&gt;

&lt;script src="https://rawgit.com/mrdoob/three.js/master/examples/js/controls/TrackballControls.js"
&gt;&lt;/script&gt;

&lt;script src="./../data/w9/loader.js"&gt;&lt;/script&gt;

&lt;script src="./../data/w9/stl.js"&gt;&lt;/script&gt;

&lt;div&gt;
select stl file: &lt;input type="file" id="file" /&gt; or drop stl file
&lt;/div&gt;

&lt;div id="view"&gt;&lt;/div&gt;</summary><category term="作業"></category></entry><entry><title>協同產品設計實習 w6</title><link href="./xie-tong-chan-pin-she-ji-shi-xi-w6.html" rel="alternate"></link><published>2017-03-30T12:00:00+08:00</published><updated>2017-03-30T12:00:00+08:00</updated><author><name>40423112</name></author><id>tag:,2017-03-30:./xie-tong-chan-pin-she-ji-shi-xi-w6.html</id><summary type="html">&lt;p&gt;多連桿機構轉入 V-rep 進行運動模擬&lt;/p&gt;


&lt;p&gt;利用 solvespace 繪製八連桿 並轉出 .STL檔案 放入V-REP 進行運動模擬&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/211952958" width="640" height="480" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/211952958"&gt;多連桿機構轉入 V-rep 進行運動模擬&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207235"&gt;吳欣奕&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</summary><category term="作業"></category></entry><entry><title>協同產品設計實習 w5</title><link href="./xie-tong-chan-pin-she-ji-shi-xi-w5.html" rel="alternate"></link><published>2017-03-23T12:00:00+08:00</published><updated>2017-03-23T12:00:00+08:00</updated><author><name>40423112</name></author><id>tag:,2017-03-23:./xie-tong-chan-pin-she-ji-shi-xi-w5.html</id><summary type="html">&lt;p&gt;單連桿轉入V-rep 進行運動模擬&lt;/p&gt;


&lt;p&gt;利用 solvespace 繪製單連桿 並轉出 .STL檔案 放入V-REP 進行運動模擬&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/211897351" width="640" height="359" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/211897351"&gt;單連桿與四連桿機構轉入  V-rep 進行運動模擬&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207235"&gt;吳欣奕&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</summary><category term="作業"></category></entry><entry><title>協同產品設計實習 w4</title><link href="./xie-tong-chan-pin-she-ji-shi-xi-w4.html" rel="alternate"></link><published>2017-03-16T12:00:00+08:00</published><updated>2017-03-16T12:00:00+08:00</updated><author><name>40423112</name></author><id>tag:,2017-03-16:./xie-tong-chan-pin-she-ji-shi-xi-w4.html</id><summary type="html">&lt;p&gt;創立 fossil小組 在個別加入所屬小組&lt;/p&gt;


&lt;p&gt;重新設定fossil後，在已經設定好了IPV4也成功開啟，但經過老師切換掉我們的螢幕幾分鐘後，在按下重新整理之後就開不起來，在經過檢查後所有的設定都沒變，所以我使用 ipconfig /all 指令回去看我IPV4有沒有變動，在經過檢查後還是沒有任何變化 ，所以我只好重新建立一個fossil。&lt;/p&gt;
&lt;p&gt;今天老師在fossil創了個別小組，之後加入自己所屬的小組 &lt;a href="https://mde2a2.kmol.info/cdag3/wcontent"&gt;ag3&lt;/a&gt;
。&lt;/p&gt;
&lt;p&gt;今天還教我們如何使用fossil 的指令 fossil sql -R xxxxxx.fossil 這個指令可以顯示fossil的密碼&lt;/p&gt;</summary><category term="作業"></category></entry><entry><title>協同產品設計實習 w3</title><link href="./xie-tong-chan-pin-she-ji-shi-xi-w3.html" rel="alternate"></link><published>2017-03-09T12:00:00+08:00</published><updated>2017-03-09T12:00:00+08:00</updated><author><name>40423112</name></author><id>tag:,2017-03-09:./xie-tong-chan-pin-she-ji-shi-xi-w3.html</id><summary type="html">&lt;p&gt;設定 fossil
&lt;/p&gt;
&lt;p&gt;今天一開始重新設定了fossil，在設定fossil前，先進入chrome 設定proxy，網址是 140.130.17.4 連接埠是3128，再到進階裡面改掉自己IPV4之後就可以成功設定proxy。&lt;/p&gt;
&lt;p&gt;接下來去&lt;a href="http://mde.tw/2017springcd/blog/intro-fossil-scm.html"&gt;Fossil SCM 簡介&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;複製老師start.bat 蓋掉自己的原先的檔案，在CMD裡面打指令 fossil init xxxx.fossil 創立一個fossil後在記下密碼。&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/209207712" width="640" height="480" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/209207712"&gt;_2017_03_20_21_31_42_135&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207235"&gt;吳欣奕&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</summary><category term="作業"></category></entry><entry><title>協同產品設計實習 w1</title><link href="./xie-tong-chan-pin-she-ji-shi-xi-w1.html" rel="alternate"></link><published>2017-03-02T12:00:00+08:00</published><updated>2017-03-02T12:00:00+08:00</updated><author><name>40423112</name></author><id>tag:,2017-03-02:./xie-tong-chan-pin-she-ji-shi-xi-w1.html</id><summary type="html">&lt;p&gt;fourbar
&lt;/p&gt;
&lt;p&gt;使用 solvespace 繪製 四連桿機構 
&lt;iframe src="./../w2/2017w2_fourbar.html" width="640" height="360"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/209202819" width="640" height="361" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/209202819"&gt;_2017_03_20_20_56_18_732&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207235"&gt;吳欣奕&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</summary><category term="作業"></category></entry><entry><title>電腦輔助設計實習課程總結</title><link href="./dian-nao-fu-zhu-she-ji-shi-xi-ke-cheng-zong-jie.html" rel="alternate"></link><published>2017-01-12T12:00:00+08:00</published><updated>2017-01-12T12:00:00+08:00</updated><author><name>40423112</name></author><id>tag:,2017-01-12:./dian-nao-fu-zhu-she-ji-shi-xi-ke-cheng-zong-jie.html</id><summary type="html">&lt;p&gt;課程總結
&lt;/p&gt;
&lt;h1&gt;9/21 四連桿機構&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://imgur.com/lr3dVT2"&gt;&lt;img src="http://i.imgur.com/lr3dVT2.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/199280777" width="640" height="361" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/199280777"&gt;錄製_2017_01_13_15_00_10_259&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207235"&gt;吳欣奕&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;9/22 筆記&lt;/h1&gt;
&lt;h3&gt;9/22筆記&lt;/h3&gt;
&lt;p&gt;&lt;p&gt;1.創2016fallcadp_hw &lt;p&gt;
&lt;p&gt;將readme打勾 &lt;p&gt;
&lt;p&gt;格式:python 加密:agpl &lt;p&gt;
&lt;p&gt;新增gh-pages分支 &lt;p&gt;
&lt;p&gt;進入setting 點branches &lt;p&gt;
&lt;p&gt;將master變更為gh-pages &lt;p&gt;
&lt;p&gt;update &lt;p&gt;
&lt;p&gt;2.git clone 2016fallcadp_hw &lt;p&gt;
&lt;p&gt;cd 2016fallcadp_hw &lt;p&gt;
&lt;p&gt;git branch &lt;p&gt;
&lt;p&gt;git checkout gh-pages&lt;p&gt;
&lt;p&gt;git branch&lt;p&gt;
&lt;p&gt;3.學號.github.io &lt;p&gt;
&lt;p&gt;將README打勾 &lt;p&gt;
&lt;p&gt;格式:python 加密:agpl &lt;p&gt;
&lt;p&gt;點選create new file &lt;p&gt;
&lt;p&gt;打入index.html 點commit new file &lt;p&gt;
&lt;p&gt;4.創 2016fallcadp_ag6 &lt;p&gt;
&lt;p&gt;將README打勾 &lt;p&gt;
&lt;p&gt;格式:python 加密:agpl &lt;p&gt;
&lt;p&gt;將2016fallcadp_ag100 clone&lt;p&gt;
&lt;p&gt;cd 2016fallcadp_ag100 git branch git checkout gh-pages git branch&lt;p&gt;
&lt;p&gt;git submodule add -b gh-pages https://github.com/學號/2016fallcp_ag6 學號&lt;p&gt;
&lt;p&gt;git staus(檢查) 依序將隊友的資料夾加入&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;個人BLOG&lt;/h3&gt;
&lt;p&gt;&lt;p&gt; &lt;a href="https://40423112.github.io/2016fallcadp_hw/"&gt;個人作業網誌&lt;/a&gt; &lt;p&gt;&lt;/p&gt;
&lt;h3&gt;設定PROXY&lt;/h3&gt;
&lt;p&gt;&lt;p&gt;git config --global https.proxy http://proxy.mde.tw:3128 &lt;p&gt;
&lt;p&gt;git config --global http.proxy http://proxy.mde.tw:3128 &lt;p&gt;&lt;/p&gt;
&lt;h3&gt;如何把組員Hw拉回組的倉儲&lt;/h3&gt;
&lt;p&gt;&lt;p&gt;git clone 2016fallcpa cd 2016fallcpa&lt;p&gt;
&lt;p&gt;git submodule add -b gh-pages https://github.com/學號/2016fallcp_ag6 學號&lt;p&gt; 
&lt;p&gt;(表示要追蹤子模組的 gh-pages branch)&lt;p&gt;
&lt;p&gt;git submodule init,利用 git submodule update&lt;p&gt;
&lt;p&gt;git pull origin gh-pages --recurse-submodules&lt;p&gt;
&lt;p&gt;git submodule foreach "(git checkout gh-pages; git pull)&amp;amp;"&lt;p&gt;
&lt;p&gt;git submodule update --init --recursive&lt;p&gt;&lt;/p&gt;
&lt;h1&gt;10/27 solvespace&lt;/h1&gt;
&lt;iframe src="https://player.vimeo.com/video/185684438" width="640" height="341" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/185684438"&gt;錄製_2016_10_06_01_40_51_166&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207235"&gt;吳欣奕&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;11/17 四連桿機構&lt;/h1&gt;
&lt;p&gt;&lt;img src="./../data/threejs/11-174bar.png" width="800" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/threejs/11-174bar1.png" width="800" /&gt;&lt;/p&gt;
&lt;h1&gt;11/24 利用sovlespace功能&lt;/h1&gt;
&lt;h2&gt;1.parts(零件繪製)&lt;/h2&gt;
&lt;p&gt;範例檔案:  &lt;a href="http://solvespace.com/bracket.pl"&gt;http://solvespace.com/bracket.pl&lt;/a&gt;
An introductory tutorial is available, in which we draw the same part that is shown in the demo video.&lt;/p&gt;
&lt;p&gt;This covers most of the basic features of SolveSpace, including sketches, constraints, extrusions, and Boolean operations.&lt;/p&gt;
&lt;p&gt;When we first run SolveSpace, we will begin with an empty part. Initially, our view of the part will be oriented onto the XY plane; the label for that plane is displayed at the bottom left of the screen (#XY, in dark grey). The axes are also indicated by the three colored arrows at the bottom left; the X, Y, and Z axes are drawn in red, green, and blue respectively.&lt;/p&gt;
&lt;p&gt;When we hover the mouse over any entity, constraint, or other object in the sketch, that object will appear highlighted in yellow. For example, the XY plane, which is drawn as a dashed square, will appear highlighted when we hover the mouse over it. The YZ and ZX planes initially look like dashed lines, because they are being viewed on edge; but they still appear highlighted in yellow when we hold the mouse over them. It is similarly possible to highlight the X, Y, and Z axes (which are drawn as arrows), or the origin (which like all points is drawn as a green square).&lt;/p&gt;
&lt;h2&gt;Extrude (平行長出)&lt;/h2&gt;
&lt;iframe src="./../data/threejs/extrude.html" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;iframe src="https://player.vimeo.com/video/199280036" width="640" height="361" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/199280036"&gt;錄製_2017_01_13_14_44_06_340&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207235"&gt;吳欣奕&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Extrude (除料)&lt;/h2&gt;
&lt;iframe src="./../data/threejs/extrude2.html" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;iframe src="https://player.vimeo.com/video/199280040" width="640" height="361" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/199280040"&gt;錄製_2017_01_13_14_48_41_541&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207235"&gt;吳欣奕&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Lathe (旋轉繞行長出或除料)&lt;/h2&gt;
&lt;iframe src="./../data/threejs/lathe.html" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;iframe src="https://player.vimeo.com/video/199280188" width="640" height="361" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/199280188"&gt;錄製_2017_01_13_14_51_45_140&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207235"&gt;吳欣奕&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Linkages (fourbar &amp;amp; multilink) (四連桿與多連桿運動模擬) ----&lt;/p&gt;
&lt;p&gt;四連桿:利用線架構完成四連桿模擬後, 將 3D 零件以點重合, 點在面與點在線上約束各連桿後完成.&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/threejs/11-174bar.png" width="800" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/threejs/11-174bar1.png" width="800" /&gt;&lt;/p&gt;
&lt;h2&gt;2. Assembly (零件組立)&lt;/h2&gt;
&lt;iframe src="./../data/threejs/40423112.html" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;h2&gt;4. Compiled &amp;amp; API (編譯與延伸應用)&lt;/h2&gt;
&lt;p&gt;使用 Virtualbox 虛擬主機執行 Windows 64 位元與 Ubuntu 64 位元環境中的編譯與延伸應用&lt;/p&gt;
&lt;p&gt;&lt;img src="./../W7/virtualboxes.png" width="800" /&gt;&lt;/p&gt;
&lt;h1&gt;12/1 組合圖&lt;/h1&gt;
&lt;iframe src="./../W7/40423112-12-15.html" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;h1&gt;12/15 利用 solvespace 組裝3D列印機&lt;/h1&gt;
&lt;h1&gt;PNG&lt;/h1&gt;
&lt;p&gt;&lt;img src="./../1215/dispersion.png" width="800" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="./../1215/3dprint.png" width="800" /&gt;&lt;/p&gt;
&lt;h1&gt;Solvespace&lt;/h1&gt;
&lt;p&gt;&lt;iframe src="./../1215/dispersion.html" width="800" height="600"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;iframe src="./../1215/40423112-3dprint.html" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;iframe src="https://player.vimeo.com/video/199279014" width="640" height="361" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/199279014"&gt;錄製_2017_01_13_14_32_32_884&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207235"&gt;吳欣奕&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;12/22 由小組分別組裝各個零件後在一起組裝錄製組裝影片&lt;/h1&gt;
&lt;iframe src="https://player.vimeo.com/video/199279485" width="640" height="361" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/199279485"&gt;錄製_2017_01_13_14_39_16_673&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207235"&gt;吳欣奕&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/NvfGaW3GUUA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="作業"></category></entry><entry><title>12/22 作業</title><link href="./1222-zuo-ye.html" rel="alternate"></link><published>2016-12-22T12:00:00+08:00</published><updated>2016-12-22T12:00:00+08:00</updated><author><name>40423112</name></author><id>tag:,2016-12-22:./1222-zuo-ye.html</id><summary type="html">&lt;p&gt;Onshape 3D-列印機組裝&lt;/p&gt;


&lt;p&gt;分組由  40423116  拍攝影片&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/NvfGaW3GUUA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="作業"></category></entry><entry><title>12/15 作業</title><link href="./1215-zuo-ye.html" rel="alternate"></link><published>2016-12-15T12:00:00+08:00</published><updated>2016-12-15T12:00:00+08:00</updated><author><name>40423112</name></author><id>tag:,2016-12-15:./1215-zuo-ye.html</id><summary type="html">&lt;p&gt;3D-PRINT &lt;/p&gt;


&lt;h1&gt;PNG&lt;/h1&gt;
&lt;p&gt;&lt;img src="./../1215/dispersion.png" width="800" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="./../1215/3dprint.png" width="800" /&gt;&lt;/p&gt;
&lt;h1&gt;Solvespace&lt;/h1&gt;
&lt;p&gt;&lt;iframe src="./../1215/dispersion.html" width="800" height="600"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;iframe src="./../1215/40423112-3dprint.html" width="800" height="600"&gt;&lt;/iframe&gt;</summary><category term="作業"></category></entry><entry><title>12/1 作業</title><link href="./121-zuo-ye.html" rel="alternate"></link><published>2016-12-01T12:00:00+08:00</published><updated>2016-12-01T12:00:00+08:00</updated><author><name>40423112</name></author><id>tag:,2016-12-01:./121-zuo-ye.html</id><summary type="html">&lt;p&gt;組合圖&lt;/p&gt;


&lt;iframe src="./../W7/40423112-12-15.html" width="800" height="600"&gt;&lt;/iframe&gt;</summary><category term="作業"></category></entry><entry><title>11/24作業</title><link href="./1124zuo-ye.html" rel="alternate"></link><published>2016-11-24T12:00:00+08:00</published><updated>2016-11-24T12:00:00+08:00</updated><author><name>40423112</name></author><id>tag:,2016-11-24:./1124zuo-ye.html</id><summary type="html">&lt;p&gt;sovlespace &lt;/p&gt;


&lt;h1&gt;sovlespace&lt;/h1&gt;
&lt;h2&gt;1.parts(零件繪製)&lt;/h2&gt;
&lt;p&gt;範例檔案:  &lt;a href="http://solvespace.com/bracket.pl"&gt;http://solvespace.com/bracket.pl&lt;/a&gt;
An introductory tutorial is available, in which we draw the same part that is shown in the demo video.&lt;/p&gt;
&lt;p&gt;This covers most of the basic features of SolveSpace, including sketches, constraints, extrusions, and Boolean operations.&lt;/p&gt;
&lt;p&gt;When we first run SolveSpace, we will begin with an empty part. Initially, our view of the part will be oriented onto the XY plane; the label for that plane is displayed at the bottom left of the screen (#XY, in dark grey). The axes are also indicated by the three colored arrows at the bottom left; the X, Y, and Z axes are drawn in red, green, and blue respectively.&lt;/p&gt;
&lt;p&gt;When we hover the mouse over any entity, constraint, or other object in the sketch, that object will appear highlighted in yellow. For example, the XY plane, which is drawn as a dashed square, will appear highlighted when we hover the mouse over it. The YZ and ZX planes initially look like dashed lines, because they are being viewed on edge; but they still appear highlighted in yellow when we hold the mouse over them. It is similarly possible to highlight the X, Y, and Z axes (which are drawn as arrows), or the origin (which like all points is drawn as a green square).&lt;/p&gt;
&lt;h2&gt;Extrude (平行長出)&lt;/h2&gt;
&lt;iframe src="./../data/threejs/extrude.html" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;h2&gt;Extrude (除料)&lt;/h2&gt;
&lt;iframe src="./../data/threejs/extrude2.html" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;h2&gt;Lathe (旋轉繞行長出或除料)&lt;/h2&gt;
&lt;iframe src="./../data/threejs/lathe.html" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;p&gt;Linkages (fourbar &amp;amp; multilink) (四連桿與多連桿運動模擬) ----&lt;/p&gt;
&lt;p&gt;四連桿:利用線架構完成四連桿模擬後, 將 3D 零件以點重合, 點在面與點在線上約束各連桿後完成.&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/threejs/11-174bar.png" width="800" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/threejs/11-174bar1.png" width="800" /&gt;&lt;/p&gt;
&lt;h2&gt;2. Assembly (零件組立)&lt;/h2&gt;
&lt;iframe src="./../data/threejs/40423112.html" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;h2&gt;4. Compiled &amp;amp; API (編譯與延伸應用)&lt;/h2&gt;
&lt;p&gt;使用 Virtualbox 虛擬主機執行 Windows 64 位元與 Ubuntu 64 位元環境中的編譯與延伸應用&lt;/p&gt;
&lt;p&gt;&lt;img src="./../W7/virtualboxes.png" width="800" /&gt;&lt;/p&gt;</summary><category term="作業"></category></entry><entry><title>四連桿機構</title><link href="./si-lian-gan-ji-gou.html" rel="alternate"></link><published>2016-11-17T12:00:00+08:00</published><updated>2016-11-17T12:00:00+08:00</updated><author><name>40423112</name></author><id>tag:,2016-11-17:./si-lian-gan-ji-gou.html</id><summary type="html">&lt;p&gt;四連桿機構 &lt;/p&gt;


&lt;p&gt;&lt;img src="./../data/threejs/11-174bar.png" width="800" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/threejs/11-174bar1.png" width="800" /&gt;&lt;/p&gt;
&lt;p&gt;繪圖流程, 導入程式庫, 啟動, 然後引用各種模組開始繪圖&lt;/p&gt;

&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" 
    src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫兩條直線 --&gt;

&lt;canvas id="fourbar1" width="600" height="200"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# 準備繪圖畫布
canvas = doc["fourbar1"]
ctx = canvas.getContext("2d")

# 以下可以利用 ctx 物件進行畫圖
# 先畫一條直線
ctx.beginPath()
# 設定線的寬度為 1 個單位
ctx.lineWidth = 1
# 將畫筆移動到 (100, 100) 座標點
ctx.moveTo(100, 100)
# 然後畫直線到 (150, 200) 座標點
ctx.lineTo(150, 200)
# 畫右上左下的斜線
ctx.moveTo(150, 100)
ctx.lineTo(100, 200)
# 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
ctx.strokeStyle = "blue"
# 實際執行畫線
ctx.stroke()
ctx.closePath()
&lt;/script&gt;</summary><category term="上課筆記"></category></entry><entry><title>40423112</title><link href="./40423112.html" rel="alternate"></link><published>2016-10-27T12:00:00+08:00</published><updated>2016-10-27T12:00:00+08:00</updated><author><name>40423112</name></author><id>tag:,2016-10-27:./40423112.html</id><summary type="html">&lt;p&gt;solvespace&lt;/p&gt;


&lt;iframe src="https://player.vimeo.com/video/185684438" width="640" height="341" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/185684438"&gt;錄製_2016_10_06_01_40_51_166&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207235"&gt;吳欣奕&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</summary><category term="作業"></category></entry><entry><title>上課筆記</title><link href="./shang-ke-bi-ji.html" rel="alternate"></link><published>2016-09-22T12:00:00+08:00</published><updated>2016-09-22T12:00:00+08:00</updated><author><name>40423112</name></author><id>tag:,2016-09-22:./shang-ke-bi-ji.html</id><summary type="html">&lt;p&gt;9/22筆記 
&lt;/p&gt;
&lt;h3&gt;9/22筆記&lt;/h3&gt;
&lt;p&gt;&lt;p&gt;1.創2016fallcadp_hw &lt;p&gt;
&lt;p&gt;將README打勾 &lt;p&gt;
&lt;p&gt;格式:python 加密:agpl &lt;p&gt;
&lt;p&gt;新增gh-pages分支 &lt;p&gt;
&lt;p&gt;進入setting 點branches &lt;p&gt;
&lt;p&gt;將master變更為gh-pages &lt;p&gt;
&lt;p&gt;update &lt;p&gt;
&lt;p&gt;2.git clone 2016fallcadp_hw &lt;p&gt;
&lt;p&gt;cd 2016fallcadp_hw &lt;p&gt;
&lt;p&gt;git branch &lt;p&gt;
&lt;p&gt;git checkout gh-pages&lt;p&gt;
&lt;p&gt;git branch&lt;p&gt;
&lt;p&gt;3.學號.github.io &lt;p&gt;
&lt;p&gt;將README打勾 &lt;p&gt;
&lt;p&gt;格式:python 加密:agpl &lt;p&gt;
&lt;p&gt;點選create new file &lt;p&gt;
&lt;p&gt;打入index.html 點commit new file &lt;p&gt;
&lt;p&gt;4.創 2016fallcadp_ag6 &lt;p&gt;
&lt;p&gt;將README打勾 &lt;p&gt;
&lt;p&gt;格式:python 加密:agpl &lt;p&gt;
&lt;p&gt;將2016fallcadp_ag100 clone&lt;p&gt;
&lt;p&gt;cd 2016fallcadp_ag100 git branch git checkout gh-pages git branch&lt;p&gt;
&lt;p&gt;git submodule add -b gh-pages https://github.com/學號/2016fallcp_ag6 學號&lt;p&gt;
&lt;p&gt;git staus(檢查) 依序將隊友的資料夾加入&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;個人BLOG&lt;/h3&gt;
&lt;p&gt;&lt;p&gt; &lt;a href="https://40423112.github.io/2016fallcadp_hw/"&gt;個人作業網誌&lt;/a&gt; &lt;p&gt;&lt;/p&gt;
&lt;h3&gt;設定PROXY&lt;/h3&gt;
&lt;p&gt;&lt;p&gt;git config --global https.proxy http://proxy.mde.tw:3128 &lt;p&gt;
&lt;p&gt;git config --global http.proxy http://proxy.mde.tw:3128 &lt;p&gt;&lt;/p&gt;
&lt;h3&gt;如何把組員Hw拉回組的倉儲&lt;/h3&gt;
&lt;p&gt;&lt;p&gt;git clone 2016fallcpa cd 2016fallcpa&lt;p&gt;
&lt;p&gt;git submodule add -b gh-pages https://github.com/學號/2016fallcp_ag6 學號&lt;p&gt; 
&lt;p&gt;(表示要追蹤子模組的 gh-pages branch)&lt;p&gt;
&lt;p&gt;git submodule init,利用 git submodule update&lt;p&gt;
&lt;p&gt;git pull origin gh-pages --recurse-submodules&lt;p&gt;
&lt;p&gt;git submodule foreach "(git checkout gh-pages; git pull)&amp;amp;"&lt;p&gt;
&lt;p&gt;git submodule update --init --recursive&lt;p&gt;&lt;/p&gt;</summary><category term="上課筆記"></category></entry><entry><title>10/27作業</title><link href="./1027zuo-ye.html" rel="alternate"></link><published>2016-09-21T12:00:00+08:00</published><updated>2016-09-21T12:00:00+08:00</updated><author><name>40423112</name></author><id>tag:,2016-09-21:./1027zuo-ye.html</id><summary type="html">&lt;p&gt;四連桿機構&lt;/p&gt;


&lt;p&gt;&lt;a href="http://imgur.com/lr3dVT2"&gt;&lt;img src="http://i.imgur.com/lr3dVT2.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="作業"></category></entry></feed>